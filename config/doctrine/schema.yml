options:
  charset: utf8
actAs: [Timestampable]

Member:
  actAs: [Timestampable, opActivateBehavior]
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    name: { type: string(64), default: "", notnull: true }
    invite_member_id: { type: integer(4) }
  relations:
    Member: { local: invite_member_id, foreign: id, onDelete: set null }

MemberRelationship:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    member_id_to: { type: integer(4), notnull: true }
    member_id_from: { type: integer(4), notnull: true }
    is_friend: { type: boolean }
    is_friend_pre: { type: boolean }
    is_access_block: { type: boolean }
  relations:
    Member: { local: member_id_to, foreign: id, onDelete: cascade }
    MemberRelatedByMemberIdFrom: { class: Member, local: member_id_from, foreign: id, onDelete: cascade }
  indexes:
    member_id_to_from_UNIQUE:
      fields: [member_id_to, member_id_from]
      type: unique
    member_id_from_to_UNIQUE:
      fields: [member_id_from, member_id_to]
      type: unique

MemberImage:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    member_id: { type: integer(4), notnull: true }
    file_id: { type: integer(4), notnull: true }
    is_primary: boolean
  relations:
    Member: { local: member_id, foreign: id, onDelete: cascade }
    File: { local: file_id, foreign: id, onDelete: cascade }

File:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    name: { type: string(64), default: "", notnull: true }
    type: { type: string(64), default: "", notnull: true }
    original_filename: { type: string }
  relations:
    FileBin: { local: id, foreign: file_id }
  indexes:
    name_UNIQUE:
      fields: [name]
      type: unique

FileBin:
  columns:
    file_id: { type: integer(4), primary: true }
    bin: { type: blob }

Profile:
  actAs:
    I18n:
      fields: [caption, info]
      length: 5
    Timestampable:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    name: { type: string(64), default: "", notnull: true }
    is_required: { type: boolean, default: false, notnull: true }
    is_unique: { type: boolean, default: false, notnull: true }
    is_edit_public_flag: { type: boolean, default: false, notnull: true }
    default_public_flag: { type: integer(1), default: '1', notnull: true }
    form_type: { type: string(32), default: "", notnull: true }
    value_type: { type: string(32), default: "", notnull: true }
    is_disp_regist: { type: boolean, default: false, notnull: true }
    is_disp_config: { type: boolean, default: false, notnull: true }
    is_disp_search: { type: boolean, default: false, notnull: true }
    value_regexp: { type: string }
    value_min: { type: string(32) }
    value_max: { type: string(32) }
    sort_order: { type: integer(4) }
    caption: { type: string, notnull: true }
    info: { type: string }
  indexes:
    name_UNIQUE:
      fields: [name]
      type: unique

ProfileOption:
  actAs:
    I18n:
      fields: [value]
      length: 5
    Timestampable:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    profile_id: { type: integer(4), notnull: true }
    value: { type: string }
    sort_order: { type: integer(4) }
  relations:
    Profile: { local: profile_id, foreign: id, onDelete: cascade }

MemberProfile:
  actAs:
    NestedSet:
      hasManyRoots: true
      rootColumnName: tree_key
    Timestampable:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    member_id: { type: integer(4), notnull: true }
    profile_id: { type: integer(4), notnull: true }
    profile_option_id: { type: integer(4) }
    value: { type: string }
    public_flag: { type: integer(1) }
  relations:
    Member: { local: member_id, foreign: id, onDelete: cascade }
    Profile: { local: profile_id, foreign: id, onDelete: cascade }
    ProfileOption: { local: profile_option_id, foreign: id, onDelete: cascade }
  indexes:
    lft_INDEX:
      fields: [lft]

Community:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    name: { type: string(64), default: "", notnull: true }
    file_id: { type: integer(4) }
    community_category_id: { type: integer(4) }
  relations:
    File: { local: file_id, foreign: id, onDelete: set null }
    CommunityCategory: { local: community_category_id, foreign: id, onDelete: set null }
  indexes:
    name_UNIQUE:
      fields: [name]
      type: unique

CommunityMember:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    community_id: { type: integer(4), notnull: true }
    member_id: { type: integer(4), notnull: true }
    position: { type: string(32), default: "" }
  relations:
    Community: { local: community_id, foreign: id, onDelete: cascade }
    Member: { local: member_id, foreign: id, onDelete: cascade }

AdminUser:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    username: { type: string(64), default: "", notnull: true }
    password: { type: string(40), default: "", notnull: true }
  indexes:
    username_UNIQUE:
      fields: [username]
      type: unique

SnsConfig:
  actAs: []
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    name: { type: string(64), default: "", notnull: true }
    value: { type: string }
  indexes:
    name_UNIQUE:
      fields: [name]
      type: unique

MemberConfig:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    member_id: { type: integer(4), notnull: true }
    name: { type: string(64), default: "", notnull: true }
    value: { type: string }
  relations:
    Member: { local: member_id, foreign: id, onDelete: cascade }
  indexes:
    name_INDEX:
      fields: [name]

CommunityConfig:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    community_id: { type: integer(4), notnull: true }
    name: { type: string(64), default: "", notnull: true }
    value: { type: string }
  relations:
    Community: { local: community_id, foreign: id, onDelete: cascade }

CommunityCategory:
  actAs:
    NestedSet:
      hasManyRoots: true
      rootColumnName: tree_key
    Timestampable:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    name: { type: string(64), default: "", notnull: true }
    is_allow_member_community: { type: boolean, default: true, notnull: true }
    tree_key: { type: integer(4) }
    sort_order: { type: integer(4) }
  indexes:
    lft_INDEX:
      fields: [lft]

Gadget:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    type: { type: string(64), default: "", notnull: true }
    name: { type: string(64), default: "", notnull: true }
    sort_order: { type: integer(4) }
  indexes:
    sort_order_INDEX:
      fields: [sort_order]

GadgetConfig:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    name: { type: string(64), default: "", notnull: true }
    gadget_id: { type: integer(4) }
    value: { type: string }
  relations:
    Gadget: { local: gadget_id, foreign: id, onDelete: cascade }

Navigation:
  actAs:
    I18n:
      fields: [caption]
      length: 5
    Timestampable:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    caption: { type: string, notnull: true }
    type: { type: string(64), default: "", notnull: true }
    uri: { type: string, notnull: true }
    sort_order: { type: integer(4) }
  indexes:
    type_sort_order_INDEX:
      fields: [type, sort_order]

Blacklist:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    uid: { type: string(32), default: "", notnull: true }
    memo: { type: string }
  indexes:
    uid_UNIQUE:
      fields: [uid]
      type: unique

OAuthConsumerInformation:
  tableName: oauth_consumer
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    name: { type: string(64), default: "", notnull: true }
    description: { type: string }
    type: { type: enum, values: [browser, client], default: "browser" }
    name: { type: string(64), default: "", notnull: true }
    key_string: { type: string(16), default: "", notnull: true }
    secret: { type: string(32), default: "", notnull: true }
    file_id: { type: integer(4) }
  relations:
    Image: { class: File, local: file_id, foreign: id, onDelete: set null }
  indexes:
    key_secret_UNIQUE:
      fields: [key_string, secret]
      type: unique

OAuthAdminToken:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    oauth_consumer_id: { type: integer(4), notnull: true }
    admin_user_id: { type: integer(4), notnull: true }
    key_string: { type: string(16), default: "", notnull: true }
    secret: { type: string(32), default: "", notnull: true }
    type: { type: enum, values: [request, access], default: "request" }
    expires_at: { type: timestamp }
    is_active: { type: boolean, default: true, notnull: true }
  relations:
    AdminUser: { local: admin_user_id, foreign: id, onDelete: cascade }
    Consumer: { class: OAuthConsumerInformation, local: oauth_consumer_id, foreign: id, onDelete: cascade }
  indexes:
    key_secret_UNIQUE:
      fields: [key_string, secret]
      type: unique

Banner:
  actAs:
    I18n:
      fields: [caption]
      length: 5
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    name: { type: string(64), default: "", notnull: true }
    html: { type: string }
    is_use_html: { type: boolean, default: false, notnull: true }
    caption: { type: string, notnull: true }
  indexes:
    name_UNIQUE:
      fields: [name]
      type: unique

BannerImage:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    file_id: { type: integer(4), notnull: true }
    url: { type: string }
    name: { type: string(64) }
  relations:
    File: { local: file_id, foreign: id, onDelete: cascade }

BannerUseImage:
  columns:
    id: { type: integer(4), primary: true, autoincrement: true }
    banner_id: { type: integer(4), notnull: true }
    banner_image_id: { type: integer(4), notnull: true }
  relations:
    Banner: { local: banner_id, foreign: id }
    BannerImage: { local: banner_image_id, foreign: id }

Session:
  actAs: []
  columns:
    id: { type: integer(4), primary: true }
    data: { type: string }
    time: { type: string }
