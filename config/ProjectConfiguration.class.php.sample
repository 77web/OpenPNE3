<?php

require_once '##SYMFONY_LIB_DIR##/autoload/sfCoreAutoload.class.php';
sfCoreAutoload::register();

class ProjectConfiguration extends sfProjectConfiguration
{
  public function setup()
  {
    $this->enableAllPluginsExcept(array('sfCompat10Plugin', 'sfPropelPlugin'));
    $this->setIncludePath();
    sfConfig::set('sfDoctrinePlugin_doctrine_lib_path', sfConfig::get('sf_lib_dir').'/vendor/doctrine/Doctrine.php');
    $this->dispatcher->connect('command.pre_command', array('opActivateBehavior', 'disable'));

    //HTTP proxy to use when downloading plugin packages
    sfConfig::set('op_http_proxy', null);

    sfConfig::set('op_mail_domain', 'example.com');
    sfConfig::set('op_is_mail_address_contain_hash', false);

    sfConfig::set('doctrine_model_builder_options', array(
      'baseClassName' => 'opDoctrineRecord',
    ));
  }

  public function setIncludePath()
  {
    sfToolkit::addIncludePath(array(
      //PEAR
      dirname(__FILE__).'/../lib/vendor/PEAR/',
      dirname(__FILE__).'/../lib/vendor/OAuth/',
    ));
  }

  public function configureDoctrine($manager)
  {
    $manager->setAttribute(Doctrine::ATTR_MODEL_LOADING, Doctrine::MODEL_LOADING_CONSERVATIVE);
    $manager->setAttribute(Doctrine::ATTR_AUTOLOAD_TABLE_CLASSES, true);
    $manager->setAttribute(Doctrine::ATTR_RECURSIVE_MERGE_FIXTURES, true);
    $manager->setAttribute(Doctrine::ATTR_QUERY_CLASS, 'opDoctrineQuery');

    if (extension_loaded('apc'))
    {
      $cacheDriver = new Doctrine_Cache_Apc();
      $manager->setAttribute(Doctrine::ATTR_QUERY_CACHE, $cacheDriver);
    }
  }
}
