<?php

require_once '##SYMFONY_LIB_DIR##/autoload/sfCoreAutoload.class.php';
sfCoreAutoload::register();

define('OPENPNE_CONFIGURAIOTN_SAMPLE_HASH', 'ffc9f45bbeb1cb8832c211b87f225c8d');

class ProjectConfiguration extends sfProjectConfiguration
{
  public function setup()
  {
    $this->enableAllPluginsExcept(array('sfCompat10Plugin', 'sfPropelPlugin'));
    $this->setIncludePath();

    $this->setOpenPNEConfiguration();

    sfConfig::set('sfDoctrinePlugin_doctrine_lib_path', sfConfig::get('sf_lib_dir').'/vendor/doctrine/Doctrine.php');
    sfConfig::set('doctrine_model_builder_options', array(
      'baseClassName' => 'opDoctrineRecord',
    ));

    $this->dispatcher->connect('command.pre_command', array('opActivateBehavior', 'disable'));
  }

  protected function configureSessionStorage($name, $options = array())
  {
    $sessionName = 'OpenPNE_'.sfConfig::get('sf_app', 'default');
    $params = array('session_name' => $sessionName);

    if ('memcache' === $name)
    {
      sfConfig::set('sf_factory_storage', 'opMemcacheSessionStorage');
      sfConfig::set('sf_factory_storage_parameters', array_merge((array)$options, $params));
    }
    elseif ('database' === $name)
    {
      sfConfig::set('sf_factory_storage', 'opPDODatabaseSessionStorage');
      sfConfig::set('sf_factory_storage_parameters', array_merge(array(
        'db_table'    => 'session',
        'database'    => 'doctrine',
        'db_id_col'   => 'id',
        'db_data_col' => 'data',
        'db_time_col' => 'time',
      ), (array)$options, $params));
    }
    elseif ('file' !== $name)
    {
      sfConfig::set('sf_factory_storage', $name);
      sfConfig::set('sf_factory_storage_parameters', array_merge((array)$options, $params));
    }
  }

  public function setIncludePath()
  {
    sfToolkit::addIncludePath(array(
      //PEAR
      dirname(__FILE__).'/../lib/vendor/PEAR/',
      dirname(__FILE__).'/../lib/vendor/OAuth/',
    ));
  }

  public function configureDoctrine($manager)
  {
    $manager->setAttribute(Doctrine::ATTR_MODEL_LOADING, Doctrine::MODEL_LOADING_CONSERVATIVE);
    $manager->setAttribute(Doctrine::ATTR_AUTOLOAD_TABLE_CLASSES, true);
    $manager->setAttribute(Doctrine::ATTR_RECURSIVE_MERGE_FIXTURES, true);
    $manager->setAttribute(Doctrine::ATTR_QUERY_CLASS, 'opDoctrineQuery');

    if (extension_loaded('apc'))
    {
      $cacheDriver = new Doctrine_Cache_Apc();
      $manager->setAttribute(Doctrine::ATTR_QUERY_CACHE, $cacheDriver);
    }
  }

  protected function setOpenPNEConfiguration()
  {
    $path = dirname(__FILE__).'/OpenPNE.yml';

    if (md5_file($path.'.sample') !== OPENPNE_CONFIGURAIOTN_SAMPLE_HASH)
    {
      die('You must use original '.dirname(__FILE__).DIRECTORY_SEPARATOR.'OpenPNE.yml.sample or you must use new '.dirname(__FILE__).DIRECTORY_SEPARATOR.'ProjectConfiguration.class.php');
    }

    $config = sfYaml::load($path.'.sample');
    if (is_readable($path))
    {
      $config = array_merge($config, sfYaml::load($path));
    }

    $this->configureSessionStorage($config['session_storage']['name'], (array)$config['session_storage']['options']);
    unset($config['session_storage']);

    foreach ($config as $key => $value)
    {
      sfConfig::set('op_'.$key, $value);
    }
  }
}
